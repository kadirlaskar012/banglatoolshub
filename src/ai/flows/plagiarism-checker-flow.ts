// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview AI-powered plagiarism checker using Gemini.
 *
 * - checkPlagiarism - A function that analyzes text for potential plagiarism.
 * - PlagiarismInput - The input type for the checkPlagiarism function.
 * - PlagiarismResult - The return type for the checkPlagiarism function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PlagiarismInputSchema = z.object({
  text: z.string().describe('The text content to be checked for plagiarism.'),
});
export type PlagiarismInput = z.infer<typeof PlagiarismInputSchema>;

const PlagiarismResultSchema = z.object({
    uniquePercentage: z.number().describe('The percentage of the text that is unique.'),
    plagiarizedPercentage: z.number().describe('The percentage of the text that is plagiarized.'),
    sentences: z.array(z.object({
        text: z.string(),
        isPlagiarized: z.boolean().describe('Whether this sentence is considered plagiarized.'),
    })).describe('The list of sentences with plagiarism analysis.'),
});
export type PlagiarismResult = z.infer<typeof PlagiarismResultSchema>;


export async function checkPlagiarism(input: PlagiarismInput): Promise<PlagiarismResult> {
  return plagiarismCheckerFlow(input);
}

const prompt = ai.definePrompt({
  name: 'plagiarismCheckerPrompt',
  input: {schema: PlagiarismInputSchema},
  output: {schema: PlagiarismResultSchema},
  prompt: `You are an expert AI Plagiarism Detector for Bengali text. Your task is to analyze the given text and identify sentences that are likely unoriginal, generic, or potentially plagiarized from common sources on the internet.

  Analyze the following text:
  ---
  {{{text}}}
  ---

  Instructions:
  1.  Break down the text into individual sentences.
  2.  For each sentence, determine if it is likely plagiarized or unoriginal. A sentence is considered plagiarized if it's a very common phrase, a well-known quote without attribution, or sounds like it was copied directly from a source like Wikipedia or a generic article.
  3.  Return a list of all original sentences, each with the 'isPlagiarized' flag set to false.
  4.  Also, return a list of all sentences you identify as plagiarized, with the 'isPlagiarized' flag set to true.
  5.  Based on the analysis, calculate the 'uniquePercentage' and 'plagiarizedPercentage'.

  Your entire output MUST be in the specified JSON format. Do not add any extra commentary.
  `,
});

const plagiarismCheckerFlow = ai.defineFlow(
  {
    name: 'plagiarismCheckerFlow',
    inputSchema: PlagiarismInputSchema,
    outputSchema: PlagiarismResultSchema,
  },
  async (input) => {
    // Basic validation
    if (!input.text || input.text.trim().length < 20) {
        return {
            uniquePercentage: 100,
            plagiarizedPercentage: 0,
            sentences: input.text.split(/(?<=[.?!ред\n])\s*/).filter(s => s.trim().length > 0).map(s => ({ text: s, isPlagiarized: false }))
        };
    }

    const {output} = await prompt(input);
    return output!;
  }
);
